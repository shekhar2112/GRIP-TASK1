# -*- coding: utf-8 -*-
"""student_marks_predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d3s6Vt5JDvNND4uqz2_Ger6PM2noTn3L

<a href="https://colab.research.google.com/gist/Ayush810/aec461d8a766bc5a8dfbfa0103bb29bf/student_marks_predictor.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# Business Problem
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Dataset path
url="https://drive.google.com/file/d/1UIUSCHSz8FACkMive6k9C8ruvu-MBZR1/view?usp=sharing"
path='https://drive.google.com/uc?export=download&id='+url.split('/')[-2]
data=pd.read_csv(path) 
data.head()

"""# Discover and visulaize the data to gain insigths"""

data.info()

data.describe()

plt.scatter(x=data.study_hours,y=data.student_marks)
plt.xlabel("Study Hours")
plt.ylabel("Study score")
plt.title("Study Hours Vs Student Marks ")
plt.show()

"""# Prepare The Data For Machine Learning Algorithm """

# Data Cleaning 
data.isnull().sum()

data.mean()

data2=data.fillna(data.mean())

data2.isnull().sum()

data2.head()

# split dataset for training
x=data2.drop("student_marks", axis="columns")
y=data2.drop("study_hours",axis="columns")
print("shape of x",x.shape)
print("shape of y", y.shape)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2, random_state=51) # tes_size is defining how much data we want for testing so 0.2 means i am using 20 percent data for testing

print("shape of X Train",X_train.shape)
print("shape of Y Train",Y_train.shape)
print("shape of X Test", X_test.shape)
print("shape of Y Test",Y_test.shape)



"""# Select a model and train it"""

# So in above scatter plot as we saw that when the value of x is increasing the value of y is also increasing in a linear format so we can use linear regression model
from sklearn.linear_model import LinearRegression
lr=LinearRegression()

lr.fit(X_train,Y_train)

lr.coef_

lr.intercept_

m= 3.93
 c= 50.44
 y= m*12+c
 y

lr.predict([[4]])[0][0].round(2)

y_pred=lr.predict(X_test)
y_pred

pd.DataFrame(np.c_[X_test,Y_test,y_pred], columns=["study_hours","student_marks_original","student_marks_predicted"])

"""# Fine Tuning The modle"""

lr.score(X_test,Y_test) # so our model is giving the accuracy of 95.14%

plt.scatter(X_test,Y_test)

plt.scatter(X_test,Y_test)
plt.plot(X_train,lr.predict(X_train),color="red")

"""# Present Your Solution"""

import joblib
joblib.dump(lr,"Student_Marks_Predictor.pkl")

model=joblib.load("Student_Marks_Predictor.pkl")

model.predict([[5]])